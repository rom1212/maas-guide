#cloud-config

rsyslog:
   remotes:
     maas: "172.23.48.10:514"

power_state:
   delay: now
   mode: poweroff
   timeout: 1800
   condition: test ! -e /tmp/block-poweroff

misc_bucket:
 - &maas_enlist |
   # Bring up all interfaces.
   ip -o link | cut -d: -f2 | xargs -I{} ip link set dev {} up
   ####  IPMI setup  ######
   # If IPMI network settings have been configured statically, you can
   # make them DHCP. If \'true\', the IPMI network source will be changed
   # to DHCP.
   IPMI_CHANGE_STATIC_TO_DHCP="false"

   # In certain hardware, the parameters for the ipmi_si kernel module
   # might need to be specified. If you wish to send parameters, uncomment
   # the following line.
   #IPMI_SI_PARAMS="type=kcs ports=0xca2"

   TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX")
   IPMI_CONFIG_D="${TEMP_D}/ipmi.d"
   BIN_D="${TEMP_D}/bin"
   OUT_D="${TEMP_D}/out"
   PATH="$BIN_D:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

   mkdir -p "$BIN_D" "$OUT_D" "$IPMI_CONFIG_D"

   load_modules() {
      modprobe ipmi_msghandler
      modprobe ipmi_devintf
      modprobe ipmi_si ${IPMI_SI_PARAMS}
      modprobe ipmi_ssif
      udevadm settle
   }

   add_bin() {
      cat > "${BIN_D}/$1"
      chmod "${2:-755}" "${BIN_D}/$1"
   }
   add_ipmi_config() {
      cat > "${IPMI_CONFIG_D}/$1"
      chmod "${2:-644}" "${IPMI_CONFIG_D}/$1"
   }

   # Example config: enable BMC remote access (on some systems.)
   #add_ipmi_config "02-global-config.ipmi" <<"END_IPMI_CONFIG"
   #Section Lan_Channel
   #     Volatile_Access_Mode                    Always_Available
   #     Volatile_Enable_User_Level_Auth         Yes
   #     Volatile_Channel_Privilege_Limit        Administrator
   #     Non_Volatile_Access_Mode                Always_Available
   #     Non_Volatile_Enable_User_Level_Auth     Yes
   #     Non_Volatile_Channel_Privilege_Limit    Administrator
   #EndSection
   #END_IPMI_CONFIG

   add_bin "maas-ipmi-autodetect-tool" <<"END_MAAS_IPMI_AUTODETECT_TOOL"
   #!/usr/bin/python3
   
   import glob
   import re
   import subprocess
   
   
   def detect_ipmi():
       # XXX: andreserl 2013-04-09 bug=1064527: Try to detect if node
       # is a Virtual Machine. If it is, do not try to detect IPMI.
       with open(\'/proc/cpuinfo\', \'r\') as cpuinfo:
           for line in cpuinfo:
               if line.startswith(\'model name\') and \'QEMU\' in line:
                   return (False, None)
   
       (status, output) = subprocess.getstatusoutput(\'ipmi-locate\')
       show_re = re.compile(\'(IPMI\\ Version:) (\\d\\.\\d)\')
       res = show_re.search(output)
       if res is None:
           found = glob.glob("/dev/ipmi[0-9]")
           if len(found):
               return (True, "UNKNOWN: %s" % " ".join(found))
           return (False, "")
   
       # We\'ve detected IPMI, but it doesn\'t necessarily mean we can access
       # the BMC. Let\'s test if we can.
       cmd = \'bmc-config --checkout --key-pair=Lan_Conf:IP_Address_Source\'
       (status, output) = subprocess.getstatusoutput(cmd)
       if status != 0:
           return (False, "")
   
       return (True, res.group(2))
   
   
   def is_host_moonshot():
       output = subprocess.check_output([\'ipmitool\', \'raw\', \'06\', \'01\'])
       # 14 is the code that identifies a machine as a moonshot
       if output.split()[0] == "14":
           return True
       return False
   
   
   def main():
       # Check whether IPMI exists or not.
       (status, ipmi_version) = detect_ipmi()
       if not status:
           # if False, then failed to detect ipmi
           exit(1)
   
       if is_host_moonshot():
           print("moonshot")
       else:
           print("ipmi")
   
   
   if __name__ == \'__main__\':
       main()
   END_MAAS_IPMI_AUTODETECT_TOOL

   add_bin "maas-ipmi-autodetect" <<"END_MAAS_IPMI_AUTODETECT"
   #!/usr/bin/python3
   #
   # maas-ipmi-autodetect - autodetect and autoconfigure IPMI.
   #
   # Copyright (C) 2013-2016 Canonical
   #
   # Authors:
   #    Andres Rodriguez <andres.rodriguez@canonical.com>
   #
   # This program is free software: you can redistribute it and/or modify
   # it under the terms of the GNU Affero General Public License as
   # published by the Free Software Foundation, version 3 of the License.
   #
   # This program is distributed in the hope that it will be useful,
   # but WITHOUT ANY WARRANTY; without even the implied warranty of
   # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   # GNU Affero General Public License for more details.
   #
   # You should have received a copy of the GNU Affero General Public License
   # along with this program.  If not, see <http://www.gnu.org/licenses/>.
   
   from collections import OrderedDict
   import json
   import os
   import platform
   import random
   import re
   import string
   import subprocess
   import time
   
   
   class IPMIError(Exception):
       """An error related to IPMI."""
   
   
   def run_command(command_args):
       """Run a command. Return output if successful or raise exception if not."""
       output = subprocess.check_output(command_args, stderr=subprocess.STDOUT)
       return output.decode(\'utf-8\')
   
   
   def bmc_get(key):
       """Fetch the output of a key via bmc-config checkout."""
       command = (\'bmc-config\', \'--checkout\', \'--key-pair=%s\' % key)
       output = run_command(command)
       return output
   
   
   def bmc_set(key, value):
       """Set the value of a key via bmc-config commit."""
       command = (\'bmc-config\', \'--commit\', \'--key-pair=%s=%s\' % (key, value))
       run_command(command)
   
   
   def format_user_key(user_number, parameter):
       """Format a user key string."""
       return \'%s:%s\' % (user_number, parameter)
   
   
   def bmc_user_get(user_number, parameter):
       """Get a user parameter via bmc-config commit."""
       key = format_user_key(user_number, parameter)
       raw = bmc_get(key)
       pattern = r\'^\\s*%s(?:[ \\t])+([^#\\s]+[^\
]*)$\' % (re.escape(parameter))
       match = re.search(pattern, raw, re.MULTILINE)
       if match is None:
           return None
       return match.group(1)
   
   
   def bmc_user_set(user_number, parameter, value):
       """Set a user parameter via bmc-config commit."""
       key = format_user_key(user_number, parameter)
       bmc_set(key, value)
   
   
   def bmc_list_sections():
       """Retrieve the names of config sections from the BMC."""
       command = (\'bmc-config\', \'-L\')
       output = run_command(command)
       return output
   
   
   def list_user_numbers():
       """List the user numbers on the BMC."""
       output = bmc_list_sections()
       pattern = r\'^(User\\d+)$\'
       users = re.findall(pattern, output, re.MULTILINE)
   
       return users
   
   
   def pick_user_number_from_list(search_username, user_numbers):
       """Pick the best user number for a user from a list of user numbers.
   
       If any any existing user\'s username matches the search username, pick
       that user.
   
       Otherwise, pick the first user that has no username set.
   
       If no users match those criteria, raise an IPMIError.
       """
       first_unused = None
   
       for user_number in user_numbers:
           # The IPMI spec reserves User1 as anonymous.
           if user_number == \'User1\':
               continue
   
           username = bmc_user_get(user_number, \'Username\')
   
           if username == search_username:
               return user_number
   
           # Usually a BMC won\'t include a Username value if the user is unused.
           # Some HP BMCs use "(Empty User)" to indicate a user in unused.
           if username in [None, \'(Empty User)\'] and first_unused is None:
               first_unused = user_number
   
       return first_unused
   
   
   def pick_user_number(search_username):
       """Pick the best user number for a username."""
       user_numbers = list_user_numbers()
       user_number = pick_user_number_from_list(search_username, user_numbers)
   
       if not user_number:
           raise IPMIError(\'No IPMI user slots available.\')
   
       return user_number
   
   
   def is_ipmi_dhcp():
       output = bmc_get(\'Lan_Conf:IP_Address_Source\')
       show_re = re.compile(\'IP_Address_Source\\s+Use_DHCP\')
       return show_re.search(output) is not None
   
   
   def set_ipmi_network_source(source):
       bmc_set(\'Lan_Conf:IP_Address_Source\', source)
   
   
   def _bmc_get_ipmi_addresses(address_type):
       try:
           return bmc_get(address_type)
       except subprocess.CalledProcessError:
           return ""
   
   
   def get_ipmi_ip_address():
       show_re = re.compile(
           \'((?:[0-9]{1,3}\\.){3}[0-9]{1,3}|[0-9a-fA-F]*:[0-9a-fA-F:.]+)\')
       for address_type in [
               \'Lan_Conf:IP_Address\',
               \'Lan6_Conf:IPv6_Static_Addresses\',
               \'Lan6_Conf:IPv6_Dynamic_Addresses\']:
           output = _bmc_get_ipmi_addresses(address_type)
           # Loop through the addreses by preference: IPv4, static IPv6, dynamic
           # IPv6.  Return the first valid, non-link-local address we find.
           # While we could conceivably allow link-local addresses, we would need
           # to devine which of our interfaces is the correct link, and then we
           # would need support for link-local addresses in freeipmi-tools.
           res = show_re.findall(output)
           for ip in res:
               if ip.lower().startswith(\'fe80::\') or ip == \'0.0.0.0\':
                   time.sleep(2)
                   continue
               if address_type.startswith(\'Lan6_\'):
                   return \'[%s]\' % ip
               return ip
       # No valid IP address was found.
       return None
   
   
   def verify_ipmi_user_settings(user_number, user_settings):
       """Verify user settings were applied correctly."""
   
       bad_values = {}
   
       for key, expected_value in user_settings.items():
           # Password isn\'t included in checkout. Plus,
           # some older BMCs may not support Enable_User.
           if key not in [\'Enable_User\', \'Password\']:
               value = bmc_user_get(user_number, key)
               if value != expected_value:
                   bad_values[key] = value
   
       if len(bad_values) == 0:
           return
   
       errors_string = \' \'.join([
           "for \'%s\', expected \'%s\', actual \'%s\';" % (
               key, user_settings[key], actual_value)
           for key, actual_value in bad_values.items()
           ]).rstrip(\';\')
       message = "IPMI user setting verification failures: %s." % (errors_string)
       raise IPMIError(message)
   
   
   def apply_ipmi_user_settings(user_settings):
       """Commit and verify IPMI user settings."""
       username = user_settings[\'Username\']
       ipmi_user_number = pick_user_number(username)
   
       for key, value in user_settings.items():
           bmc_user_set(ipmi_user_number, key, value)
   
       verify_ipmi_user_settings(ipmi_user_number, user_settings)
   
   
   def make_ipmi_user_settings(username, password):
       """Factory for IPMI user settings."""
       # Some BMCs care about the order these settings are applied in.
       #
       # - Dell Poweredge R420 Systems require the username and password to
       # be set prior to the user being enabled.
       #
       # - Supermicro systems require the LAN Privilege Limit to be set
       # prior to enabling LAN IPMI msgs for the user.
       user_settings = OrderedDict((
           (\'Username\', username),
           (\'Password\', password),
           (\'Enable_User\', \'Yes\'),
           (\'Lan_Privilege_Limit\', \'Administrator\'),
           (\'Lan_Enable_IPMI_Msgs\', \'Yes\'),
       ))
       return user_settings
   
   
   def configure_ipmi_user(username, password):
       """Create or configure an IPMI user for remote use."""
       user_settings = make_ipmi_user_settings(username, password)
       apply_ipmi_user_settings(user_settings)
   
   
   def commit_ipmi_settings(config):
       run_command((\'bmc-config\', \'--commit\', \'--filename\', config))
   
   
   def get_maas_power_settings(user, password, ipaddress, version):
       return "%s,%s,%s,%s" % (user, password, ipaddress, version)
   
   
   def get_maas_power_settings_json(user, password, ipaddress, version):
       power_params = {
           "power_address": ipaddress,
           "power_pass": password,
           "power_user": user,
           "power_driver": version,
       }
       return json.dumps(power_params)
   
   
   def generate_random_password(min_length=8, max_length=15):
       length = random.randint(min_length, max_length)
       letters = string.ascii_letters + string.digits
       return \'\'.join([random.choice(letters) for _ in range(length)])
   
   
   def bmc_supports_lan2_0():
       """Detect if BMC supports LAN 2.0."""
       output = run_command((\'ipmi-locate\'))
       if \'IPMI Version: 2.0\' in output or platform.machine() == \'ppc64le\':
           return True
       return False
   
   
   def main():
       import argparse
   
       parser = argparse.ArgumentParser(
           description=\'send config file to modify IPMI settings with\')
       parser.add_argument(
           "--configdir", metavar="folder", help="specify config file directory",
           default=None)
       parser.add_argument(
           "--dhcp-if-static", action="store_true", dest="dhcp",
           help="set network source to DHCP if Static", default=False)
       parser.add_argument(
           "--commission-creds", action="store_true", dest="commission_creds",
           help="Create IPMI temporary credentials", default=False)
   
       args = parser.parse_args()
   
       # Check whether IPMI is being set to DHCP. If it is not, and
       # \'--dhcp-if-static\' has been passed,  Set it to IPMI to DHCP.
       if not is_ipmi_dhcp() and args.dhcp:
           set_ipmi_network_source("Use_DHCP")
           # allow IPMI 120 seconds to obtain an IP address
           time.sleep(120)
       # create user/pass
       IPMI_MAAS_USER = "maas"
       IPMI_MAAS_PASSWORD = generate_random_password()
   
       configure_ipmi_user(IPMI_MAAS_USER, IPMI_MAAS_PASSWORD)
   
       # Commit other IPMI settings
       if args.configdir:
           for file in os.listdir(args.configdir):
               commit_ipmi_settings(os.path.join(args.configdir, file))
   
       # get the IP address
       IPMI_IP_ADDRESS = get_ipmi_ip_address()
       if IPMI_IP_ADDRESS is None:
           # if IPMI_IP_ADDRESS not set (or reserved), wait 60 seconds and retry.
           set_ipmi_network_source("Static")
           time.sleep(2)
           set_ipmi_network_source("Use_DHCP")
           time.sleep(60)
           IPMI_IP_ADDRESS = get_ipmi_ip_address()
   
       if IPMI_IP_ADDRESS is None:
           # Exit (to not set power params in MAAS) if no IPMI_IP_ADDRESS
           # has been detected
           exit(1)
   
       if bmc_supports_lan2_0():
           IPMI_VERSION = "LAN_2_0"
       else:
           IPMI_VERSION = "LAN"
       if args.commission_creds:
           print(get_maas_power_settings_json(
               IPMI_MAAS_USER, IPMI_MAAS_PASSWORD, IPMI_IP_ADDRESS, IPMI_VERSION))
       else:
           print(get_maas_power_settings(
               IPMI_MAAS_USER, IPMI_MAAS_PASSWORD, IPMI_IP_ADDRESS, IPMI_VERSION))
   
   if __name__ == \'__main__\':
       main()
   END_MAAS_IPMI_AUTODETECT

   add_bin "maas-moonshot-autodetect" <<"END_MAAS_MOONSHOT_AUTODETECT"
   #!/usr/bin/python3
   
   import argparse
   import json
   import re
   import subprocess
   
   
   IPMI_MAAS_USER = \'Administrator\'
   IPMI_MAAS_PASSWORD = \'password\'
   
   
   def get_local_address():
       output = subprocess.getoutput(\'ipmitool raw 0x2c 1 0\')
       return "0x%s" % output.split()[2]
   
   
   def get_cartridge_address(local_address):
       # obtain address of Cartridge Controller (parent of the system node):
       output = subprocess.getoutput(
           \'ipmitool -t 0x20 -b 0 -m %s raw 0x2c 1 0\' % local_address)
       return "0x%s" % output.split()[2]
   
   
   def get_channel_number(address, output):
       # channel number (routing to this system node)
       show = re.compile(
           r\'Device Slave Address\\s+:\\s+%sh(.*?)Channel Number\\s+:\\s+\\d+\'
           % address.replace(\'0x\', \'\').upper(),
           re.DOTALL)
       res = show.search(output)
       return res.group(0).split()[-1]
   
   
   def get_ipmi_ip_address(local_address):
       output = subprocess.getoutput(
           \'ipmitool -B 0 -T 0x20 -b 0 -t 0x20 -m %s lan print 2\' % local_address)
       show_re = re.compile(
           \'IP Address\\s+:\\s+\'
           \'(?P<addr>(?:[0-9]{1,3}\\.){3}[0-9]{1,3}|[0-9a-fA-F]*:[0-9a-fA-F:.]+)\')
       res = show_re.search(output)
       if res is None:
           return None
       return res.groupdict().get(\'addr\', None)
   
   
   def get_maas_power_settings(user, password, ipaddress, hwaddress):
       return "%s,%s,%s,%s" % (user, password, ipaddress, hwaddress)
   
   
   def get_maas_power_settings_json(user, password, ipaddress, hwaddress):
       power_params = {
           "power_address": ipaddress,
           "power_pass": password,
           "power_user": user,
           "power_hwaddress": hwaddress,
       }
       return json.dumps(power_params)
   
   
   def main():
       parser = argparse.ArgumentParser(
           description=\'send config file to modify IPMI settings with\')
       parser.add_argument(
           "--commission-creds", action="store_true", dest="commission_creds",
           help="Create IPMI temporary credentials", default=False)
   
       args = parser.parse_args()
   
       local_address = get_local_address()
       node_address = get_cartridge_address(local_address)
   
       # Obtaining channel numbers:
       output = subprocess.getoutput(
           \'ipmitool -b 0 -t 0x20 -m %s sdr list mcloc -v\' % local_address)
   
       local_chan = get_channel_number(local_address, output)
       cartridge_chan = get_channel_number(node_address, output)
   
       # ipmitool -I lanplus -H 10.16.1.11 -U Administrator -P password -B 0
       #     -T 0x88 -b 7 -t 0x72 -m 0x20 power status
       IPMI_HW_ADDRESS = "-B %s -T %s -b %s -t %s -m 0x20" % (
           cartridge_chan,
           node_address,
           local_chan,
           local_address,
           )
   
       IPMI_IP_ADDRESS = get_ipmi_ip_address(local_address)
   
       if args.commission_creds:
           print(get_maas_power_settings_json(
               IPMI_MAAS_USER, IPMI_MAAS_PASSWORD, IPMI_IP_ADDRESS,
               IPMI_HW_ADDRESS))
       else:
           print(get_maas_power_settings(
               IPMI_MAAS_USER, IPMI_MAAS_PASSWORD, IPMI_IP_ADDRESS,
               IPMI_HW_ADDRESS))
   
   
   if __name__ == \'__main__\':
       main()
   END_MAAS_MOONSHOT_AUTODETECT

   add_bin "maas-wedge-autodetect" <<"END_MAAS_WEDGE_AUTODETECT"
   #!/bin/bash
   
   # This script will detect if there is a Wedge power driver
   # and tell you the ip address of the Wedge BMC
   
   # The LLA of OpenBMC and default username password
   SWLLA="fe80::ff:fe00:2" # needed to find the DEV for internal BMC network
   BMCLLA="fe80::1" # The BMC\'s LLA
   SSHUSER="root" # Default username
   SSHPASS="0penBmc" # Default password
   
   Error(){
           echo "ERROR: $1"
           exit 1
   }
   
   Usage(){
           cat <<EOF
   Usage: ${0##*/} [ options ]
   
      node enlistment into the MAAS server
   
      options:
         -c | --check            check if this is a wedge
         -g | --get-credentials  obtain the credentials for the wedge
         -e | --get-enlist-creds obtain the credentials for the wedge for enlistment
         -h | --help             display usage
   
      Example:
       - ${0##*/} --check
   
   EOF
   }
   
   bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || Error "$@"; }
   
   short_opts="hcge"
   long_opts="help,check,get-credentials,get-enlist-creds"
   getopt_out=$(getopt --name "${0##*/}" \\
           --options "${short_opts}" --long "${long_opts}" -- "$@") &&
           eval set -- "${getopt_out}" ||
           bad_Usage
   
   if [ -z "$(which sshpass)" ]
   then
           Error "please apt-get install sshpass"
   fi
   
   # Obtain the \'net\' device connected to the BMC.
   DEV="$(ip -o a show to "${SWLLA}" | awk \'// { print $2 }\')" || Error "Unable to detect the \'wedge\' net device connected to the BMC."
   
   # Get dmidecode information to find out if this is a switch
   SM="$(dmidecode -s system-manufacturer)"
   SPN="$(dmidecode -s system-product-name)"
   BPN="$(dmidecode -s baseboard-product-name)"
   
   detect_known_switch(){
       # This is based of https://github.com/lool/sonic-snap/blob/master/common/id-switch
       # try System Information > Manufacturer first
       case "$SM" in
           "Intel")
               case "$SPN" in
                   "EPGSVR")
                       manufacturer=accton
                       ;;
                   *)
                       Error "Unable to detect switch"
                       ;;
               esac
               ;;
           "Joytech")
               case "$SPN" in
                   "Wedge-AC-F 20-001329")
                       manufacturer=accton
                       ;;
                   *)
                       Error "Unable to detect switch"
                       ;;
               esac
               ;;
           "To be filled by O.E.M.")
               case "$BPN" in
                   "PCOM-B632VG-ECC-FB-ACCTON-D")
                       manufacturer=accton
                       ;;
                   *)
                       Error "Unable to detect switch"
                       ;;
               esac
               ;;
           *)
               Error "Unable to detect switch"
               ;;
       esac
       # next look at System Information > Product Name
       case "$manufacturer-$SPN" in
           "accton-EPGSVR")
               model=wedge40
               ;;
           "accton-Wedge-AC-F 20-001329")
               model=wedge40
               ;;
           "accton-To be filled by O.E.M.")
               case "$BPN" in
                   "PCOM-B632VG-ECC-FB-ACCTON-D")
                       model=wedge100
                       ;;
                   *)
                       Error "Unable to detect switch model"
                       ;;
               esac
               ;;
           *)
               Error "Unable to detect switch model"
               ;;
       esac
       echo "$model"
   }
   
   wedge_autodetect(){
       # First detect this is a known switch
       model=$(detect_known_switch) || Error "Unable to detect switch model"
       # Second, lets verify if this is a known endpoint
       # First try to hit the API. This would work on Wedge 100.
       if curl -s \'http://[\'"${BMCLLA}"%"${DEV}"\']:8080/api\' | grep -qs \'Wedge RESTful API Entry\'; then
           echo "wedge"
       # If the above failed, try to hit the SSH. This would work on Wedge 40
       elif [ ! -z "$(sshpass -p "${SSHPASS}" ssh -o StrictHostKeyChecking=no "${SSHUSER}"@"${BMCLLA}"%"${DEV}" \'ip -o -4 addr show | awk "{ if(NR>1)print \\$4 "} | cut -d/ -f1\')" ]; then
           echo "wedge"
       else
           Error "Unable to detect the BMC for a "$model" switch"
       fi
   }
   
   wedge_discover(){
       # Obtain the IP address of the BMC by logging into it using the default values (we cannot auto-discover
       # non-default values).
       IP="$(sshpass -p "${SSHPASS}" ssh -o StrictHostKeyChecking=no "${SSHUSER}"@"${BMCLLA}"%"${DEV}" \\
           \'ip -o -4 addr show | awk "{ if(NR>1)print \\$4 "} | cut -d/ -f1\')" || Error "Unable to obtain the \'wedge\' BMC IP address."
       # If we were able to optain the IP address, then we can simply return the credentials.
       echo "$SSHUSER,$SSHPASS,$IP,"
   }
   
   
   wedge_discover_json(){
       # Obtain the IP address of the BMC by logging into it using the default values (we cannot auto-discover
       # non-default values).
       IP="$(sshpass -p "${SSHPASS}" ssh -o StrictHostKeyChecking=no "${SSHUSER}"@"${BMCLLA}"%"${DEV}" \\
           \'ip -o -4 addr show | awk "{ if(NR>1)print \\$4 "} | cut -d/ -f1\')" || Error "Unable to obtain the \'wedge\' BMC IP address."
       # If we were able to optain the IP address, then we can simply return the credentials.
       echo "{\\"power_user\\":\\""$SSHUSER"\\", \\"power_pass\\":\\""$SSHPASS"\\",\\"power_address\\":\\""$IP"\\"}"
   }
   
   while [ $# -ne 0 ]; do
           cur="${1}"; next="${2}";
           case "$cur" in
                   -h|--help) Usage; exit 0;;
                   -c|--check) wedge_autodetect; exit 0;;
                   -g|--get-credentials) wedge_discover; exit 0;;
                   -e|--get-enlist-creds) wedge_discover_json; exit 0;;
                   --) shift; break;;
           esac
           shift;
   done
   Usage
   
   END_MAAS_WEDGE_AUTODETECT

   add_bin "maas-enlist" <<"END_MAAS_ENLIST"
   #!/bin/bash
   #
   #    maas-enlist: MAAS Enlistment Tool
   #
   #    Copyright (C) 2014-2016 Canonical Ltd.
   #
   #    Authors: Andres Rodriguez <andres.rodriguez@canonical.com>
   #
   #    This program is free software: you can redistribute it and/or modify
   #    it under the terms of the GNU General Public License as published by
   #    the Free Software Foundation, version 3 of the License.
   #
   #    This program is distributed in the hope that it will be useful,
   #    but WITHOUT ANY WARRANTY; without even the implied warranty of
   #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   #    GNU General Public License for more details.
   #
   #    You should have received a copy of the GNU General Public License
   #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
   
   get_mac_addresses() {
   \tlocal macs
   \tlocal pxe_mac
   \tlocal mac_addresses
   \tmacs=`ip addr | egrep \'link/ether\' | cut -d\' \' -f6`
   \t# Obtain the BOOTIF MAC address from the kernel command line.
   \t# Note that BOOTIF stores the MAC in the format of
   \t# \'01-AA-BB-CC-DD-EE-FF", or "01-AA:BB:CC:DD:EE:FF",
           # and we remove the \'01-\'.
   \tpxe_mac=`cat /proc/cmdline | egrep \'BOOTIF=\' | sed -e \'s/.*[[:space:]]BOOTIF=\\([-:0-9A-Fa-f]\\+\\).*/\\1/g\' -e \'s,^01-,,g\' -e \'s,-,:,g\'`
   \t# Initialize the mac_address variable with "$pxe_mac",
   \t# otherwise "$pxe_mac" will be empty.
   \tmac_addresses="$pxe_mac"
   
   \tfor mac in $macs;
   \tdo
   \t\t# We only add more mac\'s if "$mac" is different
   \t\t# from "$pxe_mac"
   \t\tif [ "$mac" = "02:00:00:00:00:02" ]; then
   \t\t\t# This is an OpenBMC MAC and as such, we ignore it.
   \t\t\t# This MAC will be the same for all Wedge systems (e.g Wedge 40/100).
   \t\t\tcontinue
   \t\telif [ "$mac" != "$pxe_mac" ]; then
   \t\t\tif [ -z "$mac_addresses" ]; then
   \t\t\t\tmac_addresses="$mac"
   \t\t\telse
   \t\t\t\tmac_addresses="$mac_addresses,$mac"
   \t\t\tfi
   \t\tfi
   \tdone
   \techo "$mac_addresses"
   }
   
   get_mac_address_by_interface() {
   \tiface="$1"
   \tmac=`ip addr sh "$iface" | egrep -m1 \'link/ether\' | cut -d\' \' -f6`
   \techo "$mac"
   }
   
   get_mac_address_curl_parms() {
   \tlocal args="" input_string="$1"
   \tOIFS=$IFS; IFS=","; set -- $input_string; IFS=$OIFS
   \tfor i in "$@";
   \tdo
   \t\targs="${args} --data-urlencode mac_addresses=${i}"
   \t\t#mac_address="$mac_address""&mac_addresses=""${i}";
   \tdone
   \techo "${args# }"
   }
   
   get_host_architecture() {
   \tif grep "flags" /proc/cpuinfo | grep -qs "\\ lm\\ "; then
   \t\t# if /proc/cpuinfo Flags has \'lm\', it is x86_64
   \t\tarch="amd64"
   \telse
   \t\tarch=`archdetect | cut -d\'/\' -f1`
   \tfi
   \techo "$arch"
   }
   
   get_host_subarchitecture() {
   \tlocal arch=$1
   \tcase $arch in
   \t    i386|amd64|arm64|ppc64el)
   \t\t# Skip the call to archdetect as that\'s what
   \t\t# get_host_architecture does
   \t\techo generic
   \t\t;;
   \t    *)
   \t\tarchdetect | cut -d\'/\' -f2
   \t\t;;
   \tesac
   }
   
   get_server_name() {
   \tlocal servername="$1";
   \t_RET=${servername#*://};
   \t_RET=${_RET%%/*};
   \techo "$_RET";
   }
   
   enlist_node() {
   \tserverurl="${1}"
   \tmac="${2}"
   \tarch="${3}"
   \tsubarch="${4}"
   \thostname="${5}"
   \tpower_type="${6}"
   \tpower_params="${7}"
   
   \tlocal macparms=""
   \tmacparms=$(get_mac_address_curl_parms "$mac")
   
   \tcurl \\
   \t    --fail \\
   \t    --header "Accept: application/json" \\
   \t    --data-urlencode "hostname=${hostname}" \\
   \t    --data-urlencode "architecture=${arch}" \\
   \t    --data-urlencode "subarchitecture=${subarch}" \\
   \t    --data-urlencode "power_type=${power_type}" \\
   \t    --data-urlencode "power_parameters=${power_params}" \\
   \t    ${macparms} \\
   \t    "${serverurl}"
   
   }
   
   check_node() {
   \tserverurl="${1}"
   
   \tlocal exists="false" mac="${2}"
   \tOIFS=$IFS; IFS=","; set -- $mac; IFS=$OIFS
   \tfor i in "$@";
   \tdo
   \t\texists=$(\\
   \t\t\tcurl \\
   \t\t\t\t--fail \\
   \t\t\t\t--silent \\
   \t\t\t\t--get \\
   \t\t\t\t--header "Accept: application/json" \\
   \t\t\t\t--data-urlencode "op=is_registered" \\
   \t\t\t\t--data-urlencode "mac_address=${i}" \\
   \t\t\t\t"${serverurl}")
   \t\tif [ "$exists" = "true" ];
   \t\tthen
   \t\t\treturn 1
   \t\tfi
   \tdone
   \treturn 0
   }
   
   Error () {
   \techo "ERROR: $1"
   \texit 1
   }
   
   Usage() {
   \tcat <<EOF
   Usage: ${0##*/} [ options ]
   
      node enlistment into the MAAS server
   
      options:
         -s | --serverurl        resolvable MAAS server API URL (maas.local if not specified)
         -n | --hostname         hostname of the node to register
         -i | --interface        interface address to register (obtains MAC address)
         -a | --arch             architecture of the node to register
         -t | --power-type       power type (ipmi, virsh, moonshot, virsh)
         -p | --power-params     power parameters (In JSON format, between single quotes)
                                 e.g. --power-params \'{"power_address":"192.168.1.10"}\'
         -e | --exists           checks if the machine already exists in MAAS
         --subarch               subarchitecture of the node to register
   
      Example:
       - ${0##*/} --serverurl 127.0.0.1 --interface eth0
   
   EOF
   }
   
   bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || Error "$@"; exit 1; }
   
   short_opts="hs:n:i:a:t:p:e"
   long_opts="help,serverurl:,hostname:,interface:,arch:,subarch:,power-type:,power-params:,exists"
   getopt_out=$(getopt --name "${0##*/}" \\
   \t--options "${short_opts}" --long "${long_opts}" -- "$@") &&
   \teval set -- "${getopt_out}" ||
   \tbad_Usage
   
   while [ $# -ne 0 ]; do
   \tcur=${1}; next=${2};
   \tcase "$cur" in
   \t\t-h|--help) Usage ; exit 0;;
   \t\t-s|--serverurl) serverurl=${2}; shift;;
   \t\t-n|--hostname) hostname=${2}; shift;;
   \t\t-i|--interface) iface=${2}; shift;;
   \t\t-a|--arch) arch=${2}; shift;;
   \t\t--subarch) subarch=${2}; shift;;
   \t\t-t|--power-type) power_type=${2}; shift;;
   \t\t-p|--power-params) power_parameters=${2}; shift;;
   \t\t-e|--exists) check_exists=true;;
   \t\t--) shift; break;;
   \tesac
   \tshift;
   done
   
   ## check arguments here
   #[ $# -eq 0 ] && bad_Usage
   
   # If no interface is specified. obtain the MAC from all interfaces
   if [ -z "$iface" ]; then
   \tmac_addrs=$(get_mac_addresses)
   else
   \tmac_addrs=$(get_mac_address_by_interface "$iface")
   fi
   
   protocol=
   servername=$(get_server_name "$serverurl")
   if echo "$serverurl" | egrep -q \'^[a-z]+://\' ; then
   \tprotocol=`echo "$serverurl" | sed \'s#^\\([a-z]\\+\\)://.*#\\\\1#\'`
   else
   \tprotocol="http"
   fi
   
   if [ "$protocol" != "http" ] && [ "$protocol" != "https" ]; then
   \tError "Invalid protocol \'$protocol\'"
   fi
   
   if [ -z "$servername" ]; then
   \tserverurl="maas.local"
   \tservername="$serverurl"
   fi
   if echo "$serverurl" | egrep -q \'(^[a-z]+://|^)[a-z0-9\\.\\-]+($|/$)\'; then
   \tapi_url="MAAS/api/2.0/machines/"
   else
   \tapi_url=`echo $serverurl | sed \'s#^\\(\\|[a-z]\\+://\\)[a-zA-Z0-9\\.\\-]\\+\\(\\|\\:[0-9]\\+\\)/##\'`
   fi
   
   #TODO: Auto-detect hostname?
   if [ -z "$hostname" ]; then
   \tcontinue
   \t#Error "No hostname has been provided"
   fi
   
   if [ -z "$arch" ]; then
   \tarch=$(get_host_architecture)
   fi
   
   if [ -z "$subarch" ]; then
   \tsubarch=$(get_host_subarchitecture $arch)
   fi
   
   if [ -n "$power_type" ]; then
   \tcase $power_type in
   \t\tipmi) continue ;;
   \t\tvirsh) continue ;;
   \t\tmoonshot) continue ;;
   \t\twedge) continue ;;
   \t\t*) Error "Invalid power type: [$power_type]"
   \tesac
   fi
   
   if [ "$check_exists" = true ]; then
     check_node "$protocol://$servername/$api_url" "${mac_addrs}"
     exit $?
   else
     enlist_node "$protocol://$servername/$api_url" "${mac_addrs}" "$arch" "$subarch" "$hostname" "$power_type" "$power_parameters"
   fi
   END_MAAS_ENLIST

   # we could obtain the interface that booted from the kernel cmdline
   # thanks to \'IPAPPEND\' (http://www.syslinux.org/wiki/index.php/SYSLINUX)
   url="http://172.23.48.10:5240/MAAS/api/2.0/machines/"

   # Early check to see if this machine already exists in MAAS. Already
   # existing machines just stop running and power off. We do not want to
   # update the power parameters of an existing machine.
   maas-enlist --serverurl "$url" --exists
   if [ $? -eq 1 ]; then
      msg="already registered on \'$url\'; skipping enlistment"
      echo
      echo "== $(date -R): $msg"
      sleep 10
      exit 0
   fi

   # load ipmi modules
   load_modules
   pargs=""
   if $IPMI_CHANGE_STATIC_TO_DHCP; then
      pargs="--dhcp-if-static"
   fi
   set -x
   power_type=$(maas-ipmi-autodetect-tool)
   if [ -z $power_type ]; then
       power_type=$(maas-wedge-autodetect --check) || power_type=""
   fi
   case "$power_type" in
       ipmi)
           power_params=$(maas-ipmi-autodetect --configdir "$IPMI_CONFIG_D" ${pargs} --commission-creds) &&
             [ -n "${power_params}" ] && power_params=${power_params%.}
           ;;
       moonshot)
           power_params=$(maas-moonshot-autodetect --commission-creds) &&
             [ -n "${power_params}" ] && power_params=${power_params%.}
           ;;
       wedge)
           power_params=$(maas-wedge-autodetect --get-enlist-creds) || power_params=""
           ;;
   esac

   # Try maas-enlist without power parameters on failure for older versions of
   # maas-enlist without power parameter support
   maas-enlist --serverurl "$url" ${power_params:+--power-params "${power_params}" --power-type "${power_type}"}>/tmp/enlist.out ||\\
      maas-enlist --serverurl "$url" >/tmp/enlist.out
   if [ $? -eq 0 ]; then
      msg="successfully enlisted to \'$url\'"
      echo
      echo "=== $(date -R): $msg"
      cat  /tmp/enlist.out
      echo =============================================
      sleep 10
      # Uncomment the following to allow troubleshooting for an hour.
      # echo "ubuntu:ubuntu" | chpasswd
      # bfile="/tmp/block-poweroff"
      # { echo "#!/bin/sh"; echo "touch $bfile"; } > /etc/profile.d/A01-block.sh
      # sleep 3600
      # [ -e $bfile ] && exit 0
   else
      user="ubuntu"
      pass="ubuntu"

      echo "$user:$pass" | chpasswd
      bfile="/tmp/block-poweroff"
      { echo "#!/bin/sh"; echo "touch $bfile"; } > /etc/profile.d/A01-block.sh
      chmod 755 /etc/profile.d/A01-block.sh
      echo
      echo =============================================
      echo "failed to enlist system maas server"
      echo "sleeping 60 seconds then poweroff"
      echo
      echo "login with \'$user:$pass\' to debug and disable poweroff"
      echo
      cat /tmp/enlist.out
      echo =============================================
      sleep 60
      [ -e $bfile ] && exit 0
   fi



packages: [ freeipmi-tools, openipmi, ipmitool, archdetect-deb, sshpass ]
output: {all: \'| tee -a /var/log/cloud-init-output.log\'}
runcmd:
 - [ sh, -c, *maas_enlist ]
apt:
  preserve_sources_list: false
  primary:
  - arches: [amd64, i386]
    uri: http://archive.ubuntu.com/ubuntu
  - arches: [default]
    uri: http://ports.ubuntu.com/ubuntu-ports
  proxy: http://10.122.49.205:3128
  security:
  - arches: [amd64, i386]
    uri: http://archive.ubuntu.com/ubuntu
  - arches: [default]
    uri: http://ports.ubuntu.com/ubuntu-ports
apt_proxy: http://10.122.49.205:3128
system_info:
  package_mirrors:
  - arches: [i386, amd64]
    failsafe: {primary: \'http://archive.ubuntu.com/ubuntu\', security: \'http://security.ubuntu.com/ubuntu\'}
    search:
      primary: [\'http://archive.ubuntu.com/ubuntu\']
      security: [\'http://archive.ubuntu.com/ubuntu\']
  - arches: [default]
    failsafe: {primary: \'http://ports.ubuntu.com/ubuntu-ports\', security: \'http://ports.ubuntu.com/ubuntu-ports\'}
    search:
      primary: [\'http://ports.ubuntu.com/ubuntu-ports\']
      security: [\'http://ports.ubuntu.com/ubuntu-ports\']
